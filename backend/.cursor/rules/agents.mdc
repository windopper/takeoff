---
description: 
globs: 
alwaysApply: true
---
# Agents. takeoff-backend
해당 파일은 AI(Claude, GPT, Cursor 등) 또는 사람이 해당 프로젝트를 진행하기 위해 지켜야 할 규칙과 아키텍처에 대해 서술한 파일입니다.

## 0. 프로젝트 개요
takeoff-backend는 AI, SW, CS관련 커뮤니티의 이슈들을 모아서 글을 정리하는 백엔드 서비스입니다.

## 1. 룰
- test/ 디렉토리의 테스트 코드는 반드시 사람이 작성해야 합니다.
- 코드 변경 시 관련된 AIDEV-* 앵커 주석을 반드시 업데이트하세요.
- 새로운 서비스 추가 시 기존 패턴을 따라 구현하세요.

## 2. 코딩 스타일
- Typescript
- Naming: snake_case (files), PascalCase (class), camelCase (function/variables), SCREAMING_SNAKE (constants)
- 엄격한 타입 체킹 활성화 (strict: true)
- 모든 파일은 isolatedModules 호환이어야 함

## 3. 아키텍처
| 디렉토리 | 설명 |
|---------|------|
| src/hackernews/ | hackernews 서비스 관련 로직 |
| src/reddit/ | reddit 서비스 관련 로직 |
| src/common/ | 공통 로직 |
| src/manager/ | DB manager |
| src/prompts/ | LLM 프롬프트 |
| src/log/ | 실시간 로그 스트리밍 서비스 |
| src/utils/ | 유틸리티 함수 |
| src/test/ | 테스트 관련 코드 |
| migrations/ | 데이터베이스 마이그레이션 파일들 |
| schema.sql | SQL 스키마 |
| wrangler.jsonc | wrangler 설정 파일 |
| jest.config.js | Jest 테스트 설정 |

## 4. 다양한 커맨드
일관성을 위해 `npm run` 커맨드를 사용하세요.
```bash
# 개발 및 배포
npm run dev                    # 로컬 개발 서버 실행
npm run deploy                 # Cloudflare Workers에 배포
npm run start                  # 개발 서버 시작 (dev 별칭)
npm run cf-typegen            # Cloudflare Workers 타입 생성

# 테스트
npm run test                   # 테스트 실행
npm run test:watch            # 테스트 감시 모드
npm run test:coverage         # 테스트 커버리지 생성

# 데이터베이스 관리
npm run db:init               # DB 스키마 프로덕션 초기화
npm run db:local-init         # DB 스키마 로컬 초기화
npm run db:migrate            # DB 스키마 프로덕션 적용
npm run db:local-migrate      # DB 스키마 로컬 적용
npm run db:shell              # 프로덕션 DB 테이블 조회
npm run db:local-shell        # 로컬 DB 테이블 조회
```

## 5. 앵커 주석
코드베이스에 걸쳐서 특별한 주석이 필요하다면 다음과 같은 가이드라인을 따르세요. 해당 주석은 문자열 찾기 기능을 통해 쉽게 찾을 수 있습니다.

### 가이드라인
- `AIDEV-NOTE:`, `AIDEV-TODO:` 또는 `AIDEV-QUESTION:`을 사용하세요.
- 간결하게 작성하세요 (≤ 120자)
- 파일을 스캔하기 전, 항상 관련된 하위 디렉토리에서 `AIDEV-*` 앵커를 찾아보세요.
- 코드를 작성할 때 **관련된 앵커를 업데이트** 하세요.
- 인간의 지시사항 없이 `AIDEV-NOTE` 주석을 제거하지 마세요.
- 앵커 주석을 사용해야 할 경우는 다음과 같습니다. 파일이나 코드가:
    - 너무 길 때,
    - 너무 복잡할 때,
    - 매우 중요할 때,
    - 혼란스러울 때,
    - 관련된 작업에 버그가 있을 수 있을 때

예시:
```typescript
// AIDEV-NOTE: 관련 로직 구현 필요
async getTopPost() {
    ...
}
```

## 6. 특정 서비스 파일과 패턴
해당 섹션은 코드의 핵심파일에 대한 일반적인 패턴을 설명합니다. 해당 패턴은 커뮤니티 서비스에 해당됩니다. 모든 서비스가 해당 패턴을 **따르지는 않습니다**.

현재 구현된 커뮤니티 서비스는 다음과 같습니다:
- hackernews (완전 구현)
- reddit (완전 구현)

서비스 이름을 `X`라고 하면 핵심 파일에 대한 패턴은 다음과 같습니다.
- `X/X-ai-writer`: 게시글을 바탕으로 AI를 통해 글을 작성합니다.
- `X/X-filter`: 서비스 게시글 중 기준에 충족하는 글을 필터합니다.
- `X/X-parser`: 서비스 게시글들을 파싱합니다.
- `X/X-routes`: 서비스 특화된 API를 생성합니다. /index.ts에 연결됩니다.
- `X/X-service`: 서비스와 관련된 완전한 로직입니다. 단일 함수로서 해당 서비스의 기능을 사용할 수 있습니다.

### 라우팅 패턴
- 모든 API는 `/api/` 경로로 시작
- 각 서비스의 라우트는 `index.ts`에서 각 서비스의 Routes 클래스의 정적 메서드를 호출하여 처리

## 7. 사용 기술 스택
- **런타임**: Cloudflare Workers
- **언어**: TypeScript (ES2021 타겟)
- **데이터베이스**: Cloudflare D1 (SQLite 기반)
- **배포**: Wrangler
- **AI 서비스**: LangChain + Google Gemini
- **테스트**: Jest + ts-jest
- **스케줄링**: Cron triggers (매시간 정각 실행)

## 8. 데이터베이스 관리
- **마이그레이션**: `migrations/` 폴더에 순차적 번호로 관리
- **네이밍 규칙**: `{순번}_{설명}.sql` 형식
- **안전한 변경**: `IF NOT EXISTS`, `IF EXISTS` 등 사용 필수
- **환경 분리**: 로컬/프로덕션 환경별 별도 명령어 제공

## 9. API 엔드포인트 구조
| 엔드포인트 | 메서드 | 설명 |
|-----------|--------|------|
| `/api/reddit` | GET | Reddit 게시글 목록 조회 |
| `/api/hackernews` | GET | HackerNews 게시글 목록 조회 |
| `/api/posts` | GET | AI 처리된 게시글 조회 (필터링 지원) |
| `/api/process-reddit` | POST | Reddit 게시글 AI 처리 및 저장 |
| `/api/process-hackernews` | POST | HackerNews 게시글 AI 처리 및 저장 |
| `/api/process-url` | POST | 임의 URL 아티클 처리 |
| `/api/logs` | GET | 로그 가져오기 |

## 10. 환경 설정
- **환경 변수**: `GEMINI_API_KEY` (Google Gemini API 키)
- **D1 바인딩**: `DB` (takeoff 데이터베이스)
- **호환성**: nodejs_compat 플래그 활성화
- **관측성**: Cloudflare 관측성 도구 활성화

## 11. agents.mdc 업데이트 가이드라인
추가되거나 업데이트되면 도움이 되는 것들:
1. 새로운 도메인 및 아키텍처가 추가 혹은 업데이트 되었을 때
2. 새로운 API 엔드포인트가 추가되었을 때
3. 데이터베이스 스키마가 변경되었을 때
4. 새로운 서비스 패턴이 도입되었을 때
5. 기술 스택이 변경되거나 추가되었을 때
